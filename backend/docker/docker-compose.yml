version: '3.8'

services:
  web:
    build:
      context: ../      
      dockerfile: docker/Dockerfile
    restart: always
    env_file:
      - ../.env
    ports:
      - "8000:8000"
    entrypoint: ["/usr/src/app/backend/docker/entrypoint.sh"]
    networks:
      - app_network
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ../alembic/versions:/usr/src/app/backend/alembic/versions


  db:
    image: postgres:15
    container_name: financialTrecker_db
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: root
      POSTGRES_DB: financial_trecker_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app_network

  redis:
    image: redis:latest
    container_name: financialTrecker_redis
    restart: always
    ports:
      - "6379:6379"
    networks:
      - app_network

  # celery_worker:
  #   build:
  #     context: ../
  #     dockerfile: docker/Dockerfile
  #   container_name: financialTrecker_celery_worker
  #   restart: always
  #   command: ["celery", "-A", "api.core.celery_app", "worker", "--loglevel=info"]
  #   env_file:
  #     - ../.env
  #   depends_on:
  #     - redis
  #     - db
  #   networks:
  #     - app_network

volumes:
  postgres_data:

networks:
  app_network:
    driver: bridge
